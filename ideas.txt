# app/data/db.py
import sqlite3
from pathlib import Path

DB_FILE = "budgeting.db"


def get_connection(db_name: str = DB_FILE):
    """Create a SQLite connection (context manager safe)."""
    return sqlite3.connect(db_name)


def init_db(db_name: str = DB_FILE):
    """Initialize the DB schema if it doesnâ€™t exist yet."""
    schema = """
    CREATE TABLE IF NOT EXISTS Purchase (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Title TEXT,
        Date TEXT,
        Total REAL
    );

    CREATE TABLE IF NOT EXISTS PurchaseItem (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Name TEXT,
        Quantity INTEGER,
        UnitPrice REAL,
        TotPrice REAL,
        Info TEXT,
        PurchaseID INTEGER,
        FOREIGN KEY (PurchaseID) REFERENCES Purchase(ID)
    );
    """
    with sqlite3.connect(db_name) as conn:
        cursor = conn.cursor()
        cursor.executescript(schema)
        conn.commit()



# app/data/repository.py
from app.data.models import Purchase


def insert_purchase(conn, purchase: Purchase):
    """Insert a purchase and its items into the DB."""
    cursor = conn.cursor()

    purchase_dict = purchase.model_dump()
    del purchase_dict["items"]

    cursor.execute(
        "INSERT INTO Purchase(Title, Date, Total) VALUES (:title, :date, :total)",
        purchase_dict,
    )
    conn.commit()
    purchase_id = cursor.lastrowid

    for item in purchase.items:
        item_dict = item.model_dump()
        item_dict["purchase_id"] = purchase_id
        cursor.execute(
            """
            INSERT INTO PurchaseItem(Name, Quantity, UnitPrice, TotPrice, Info, PurchaseID)
            VALUES (:name, :quantity, :unit_price, :tot_price, :info, :purchase_id)
            """,
            item_dict,
        )
        conn.commit()
